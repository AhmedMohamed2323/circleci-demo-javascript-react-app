version: 2.1
jobs:
  build:
    docker:
      - image: circleci/node:10
    steps:
      - checkout # special step to check out source code to working directory
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to restore cache
            - npm-V1-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-V1-{{ .Branch }}-
            - npm-V1-
      - run: npm ci
      - save_cache:
          key: npm-V1-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is needed because
            # npm ci actually removes node_modules before installing to guarantee a clean slate. 
            # See https://circleci.com/orbs/registry/orb/apollo/oss-ci-cd-tooling#commands-npm_clean_install_with_caching
            - ~/.npm
  eslint:
    docker:
      - image: circleci/node:10    
    steps:
      - run:
          command: mkdir -p reports/eslint
          name: Ensure artifacts directory is present
      - run: yarn eslint --max-warnings=0 --format junit --output-file ./reports/eslint/eslint.xml
  test:
    docker:
      - image: circleci/node:10
    steps:
    - run:
        command: yarn add --dev jest-junit
        name: Install JUnit reporter
    - run:
        name: Run tests
        # Runs jest with "--maxWorkers=2" argument to avoid OOM issues
        command: yarn test --ci --runInBand --reporters=default --reporters=jest-junit
        environment:
          JEST_JUNIT_OUTPUT: reports/junit/js-test-results.xml
    - store_artifacts: 
        path: test-results
    - store_test_results:
        path: test-results
workflows:
  Build, Lint and Test:
    jobs:
      - build
      - eslint
      - test
